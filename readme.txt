Restunts - The Stunts reverse engineering project


Repository contents:
	docs
		Various technical docs related to (re)stunts itself.

	src\execombiner
		Tool which combines the original game and video drivers into a single
		debugable executable.

	src\idc
		Script for IdaPro to generate .asm-files from an ida project.

	src\restunts
		Project directory containing disassembly, ported c and makefiles to
		produce various executables based on the (re)stunts code.

	src\stunts
		Stunts 1.1 the game.

	tools
		Contains binaries, libraries, headers with a full toolchain for
		building restunts on Windows. The toolchain is based on TASM, TLINK,
		Turbo Debugger, Borland C++, DOSBox, and various other tools.


Contents of src\restunts:
	src\restunts\game_mod3.idb
		The analysis database for IDAPro.

	src\restunts\asm
		Contains patched, compilable disassembly generated by the script for
		IdaPro. This code is patched to work with our ported c code.

	src\restunts\asmorig
		Contains the same files as src\restunts\asm, but unpatched and does not
		use any of the ported c code.
		
	src\restunts\c
		Contains c functions ported from the disassembly.
	
	src\restunts\dos
		Makefile to build restunts for DOS.
	
	src\restunts\repldump
		Tool based on the original game code, loads replays and dumps the game
		state contents at each frame in a file for further analysis.

		
The build environment

How to build restunts on Windows:
	0) Double click tools\mount_stunts_to_s.bat (only needed once per reboot)
	1) Start cmd.exe
	4) S:
	5) cd tools
	6) setpath.bat
	7) cd \src\restunts
	8) make

If everything went fine, there should be a new s:\stunts\restunts.exe which can
be run in DOSBox. Note that the drive letter S: is hardcoded many places in the
makefiles.


The toolchain

The toolchain has evolved over the years and is now (2014) fully based on 
Borland tools. For various reasons, the build process uses both 16 and 32-bit
tools. In order to compile on modern 64 bit Windows systems, the 16-bit apps
run via DOSBox. A DOSBox window pops up multiple times during a build, and
stays open in case of build errors.

Tools used:
	- TASMX + TLINK (16 bit DOS, from Borland Turbo Assembler 4.0)
	- Borland C++ 5.2 (Win32)
	- Borland Make 5.2 (Win32, from Borland C++ 5.5, patched binary)
	- IDA 6.1 (Win32)

The 16-bit tools are:
	tasmx.exe, invoked in DOSBox by tasmbox.bat
	tlink.exe, invoked in DOSBox by tlinkbox.bat


Notes regarding make:

Borland Make was chosen because the first makefile was written for the DOS
version. Ultimately the DOS version ran into memory problems with the largest 
asm-files. Too late and too lazy to find a new make utility, the Windows
version of Borland Make, included in Borland C++ 5.5, was used instead. But:

Borland Make 5.2 uses MAKEFILE.@@@ as the filename for temporary inline files.
WLINK interprets @ in a special way on the command line and will not take the 
inline file as a parameter. As such make.exe was patched to use MAKEFILE.!!!
as the temporary filename instead.


Notes regarding the linker:

WLINK from the Open Watcom C/C++ compiler suite was originally chosen because
it supports detailed control on how to order segment classes in the final
executable image.

Our requirement is to put the original code and data first in the file, exactly
as in the original game, only patching up function calls and data access. 
TLINK and OPTLINK were originally used, but would insist on putting the CODE
and DATA segment classes first in the executable, conflicting with the crt, and
in particular the default segment class names. The final executable would then
crash.

The problems with TLINK were revisited and fixed years later, after an urgent
need to get debug information for the restunts executable. As WLINK is not able
to use the debug information format created by BCC/TASM, it became necessary to
replace either of them. After the initial attempts of using TLINK were
successful, no further investigation were made into replacing TASM.  It should
be noted that MASM seems a promising TASM replacement candidate: the syntax is
close to TASM, and it produces CodeView debug format usable by WLINK.


Notes regarding the CRT (libc)

When linking with cm.lib from Borland C++ 5.1, TLINK is not able to produce an
executable. To get around this, the tlib tool was used to extract object files
from cm.lib, and now restunts links with these instead.

When the project used WLINK, it was able to link with cm.lib from Borland C++
5.1, but was not able to link correctly with cm.lib from Borland C++ 3.1.
Before upgrading to Borland C++ 5.1, the makefile would link to single obj
files from Borland 3.1's CRT. 


Porting a function from ASM to C

1. Open src\idc\anders.idc in a text editor and locate the PortFuncName() 
   function. The IDA script needs to be aware of all the functions that have 
   been ported in order to generate asm that does not conflict with the ported
   code. Add a line in PortFuncName() for the function you've chosen.

2. Run anders.idc from within IDA to regenerate the asm files (or skip step 1+2
   and rename the respective extrn, public and function manually in the .inc
   and asm files)

3. Add a function stub to one of the existing .c files in src\restunts\c 
3.1 If you want to add a new .c-file to the project, you need to 
	- add a target for it in c\makefile
	- add a reference to the obj in CTARGETS in dos\makefile

4. Add an extrn for the c-function in asm\custom.inc

5. Start make to see if it compiles + links

6. Port to c!

Online
  irc: irc://irc.efnet.org/stunts
  irc-log: http://batman.no/stuntslog.txt
  web: http://cia.vc/stats/project/restunts
  svn: svn://anders-e.com/restunts/trunk/restunts

